{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","weatherData","isDay","date","Date","isMetric","coords","getWeatherData","_this$state$coords","_this","lat","latitude","lon","longitude","axios","get","concat","then","_ref","data","setState","dt","sys","sunrise","sunset","catch","changeMeasurement","_callee","regenerator_default","a","wrap","_context","prev","next","stop","_this2","this","setInterval","navigator","geolocation","getCurrentPosition","_ref3","_ref3$coords","error","console","log","_this$state","react_default","createElement","className","clouds","all","Math","round","wind","speed","main","humidity","temp","toFixed","onClick","temp_max","temp_min","name","country","weather","description","src","icon","alt","height","toDateString","toLocaleTimeString","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.75c4a0e4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios';\n\nclass App extends Component {\n  state = {\n    weatherData: null,\n    isDay: null,\n    date: new Date(),\n    isMetric: true,\n    coords: {}\n  };\n\n  componentDidMount() {\n    setInterval(() => {\n      this.setState({ date: new Date() })\n    }, 1000);\n\n\n    navigator.geolocation.getCurrentPosition(({ coords: { latitude, longitude } }) => {\n      this.setState({ coords: { latitude, longitude } });\n      this.getWeatherData();\n      setInterval(() => this.getWeatherData(), 60000);\n    }, error => {\n      console.log(error);\n      this.setState({ weatherData: \"error\" });\n    });\n  };\n\n\n\n  getWeatherData = () => {\n    const { latitude: lat, longitude: lon } = this.state.coords;\n    axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}${this.state.isMetric ? \"&units=metric\" : \"&units=imperial\"}&APPID=e8b9b88f679e0bb4cba08f7c992316b5`)\n      .then(({ data }) => this.setState({ weatherData: data, isDay: data.dt > data.sys.sunrise && data.dt < data.sys.sunset ? true : false }))\n      .catch(() => this.setState({ weatherData: \"error\" }))\n  };\n\n  changeMeasurement = async () => {\n    await this.setState({ isMetric: !this.state.isMetric });\n    this.getWeatherData();\n  };\n\n  render() {\n    const { weatherData, isDay, isMetric, date } = this.state;\n\n\n    return (\n      <div className=\"App\">\n        {weatherData ?\n          weatherData === \"error\" ?\n            <div className=\"content content--error\">Oops, something went wrong :( ...</div> :\n            <div className={isDay ? \"content\" : \"content content--night\"}>\n              <div className=\"content__section content__section--header\">\n                <div><i className=\"fas fa-cloud weather-icon\"></i>{weatherData.clouds.all}%</div>\n                <div><i className=\"fas fa-wind weather-icon\"></i>{Math.round(weatherData.wind.speed)}{isMetric ? \"m/s\" : \"mi/h\"}</div>\n                <div><i className=\"fas fa-tint weather-icon\"></i>{weatherData.main.humidity}%</div>\n              </div>\n              <div className=\"content__section content__section--temperature\">\n                <div className=\"content__section__right-col\">{weatherData.main.temp.toFixed(0)}</div>\n                <div className=\"content__section__left-col\">\n                  <div onClick={this.changeMeasurement} className=\"measurement\">{isMetric ? \"째C\" : \"째F\"}</div>\n                  <div><i className=\"fas fa-arrow-up\"></i>{weatherData.main.temp_max.toFixed(0)}째</div>\n                  <div><i className=\"fas fa-arrow-down\"></i>{weatherData.main.temp_min.toFixed(0)}째</div>\n                </div>\n              </div>\n              <div className=\"content__section content__section--location\">\n                {weatherData.name} {weatherData.sys.country}\n              </div>\n              <div className=\"description\">\n                <p>{weatherData.weather[0].description}</p>\n                <img src={`http://openweathermap.org/img/w/${weatherData.weather[0].icon}.png`} alt=\"weather icon\" height=\"80\" />\n              </div>\n              <div className=\"footer\">\n                <p className=\"date\">{date.toDateString()}</p>\n                <p className=\"date\">{date.toLocaleTimeString()}</p>\n              </div>\n            </div> :\n          <div className=\"content\">\n            <div className=\"container\">\n              <div className=\"banner\">\n                LOADING\n                <div className=\"banner-left\"></div>\n                <div className=\"banner-right\"></div>\n              </div>\n            </div>\n          </div>}\n      </div>\n    );\n  };\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}